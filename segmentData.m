% The segmentData script:
% 1. Fits a curve (2nd order exponential) to the photometry GCaMP signal (to correct for
% photobleaching)
% 2. Normalizes the signal by calculating dF/F (set the method by selecting
% 'normTag' variable below
% 3. Finds the times of transitions between 2 specified sleep states (set in
% 'stage' and 'stage2')
% 4. Segments the data around each transition time, subtracts the **median** value 
% of the pre-state data from entire segment and returns a matrix which is exported 
% for further analysis.

% This script takes as its inputs '.mat' files generated by Spike2. Each
% file should contain 3 structs names as follows:
% 1. Calcium: the GCaMP6s signal
% 2. Backgrou: the UV signal
% 3. instant_state: TextMarks indicating the time and type of state
% transition

% The user MUST set the conditions of the analysis. The script then calls the 
% segmentFunction to run the analysis on the files specified in names.

% Data to analyse
names = dir('yew*.mat');

% User-defined settings
settings.stage = 1;     % 1: WAKE, 2: NREM, 3: REM, 5: DOUBT
settings.stage2 = 3;     
           
settings.stateDur = 10; %length of time after the transition mouse must remain in state to include in analysis
settings.statePreDur = 10; %length of time before the transition mouse must be in state to include in analysis
settings.normTag = 1; % 0 for normal %, 1 for z-score, 2 for percentage of min and max point)
settings.plotFit = 1;  %if 1,  save fitted curve
settings.uvCorrectionTag = 0;  % If 1, peform background subtraction 
settings.Acq_rate = 1; % user input (Hz): choose time resolution of final figure
settings.pre_state_change_time = 60; % user input (seconds): choose time to display (and average) before a state change
settings.post_state_change_time = 60; % user input (seconds): choose time to display after a state change
settings.timeZero = 0; % enter time at which want vertical line drawn (usually at point of state change which is 0 seconds)

% Makes a 'results' folder in current directory in which to export
% data/figures
current_folder = pwd;
if ~exist('results', 'dir')
    mkdir('results')
end

export_folder = strcat(current_folder,  '\results\');

% Go through each mouse in the dataset and run the segmentFunction
for i = 1:length(names)
    mouseName = names(i).name(1:end-4);
    segmentFunction(mouseName, settings, export_folder);
end